# Olympe Helm Chart

# Description

# Prerequisites

- Kubernetes (k3d,k3s,minikube, etc) >= v1.24
- Kubectl: https://kubernetes.io/docs/tasks/tools/#kubectl

# About Neo4j
Default Olympe installation is using Neo4j Community as database engine. Be aware that **Neo4j Enterprise is a licensed product**. Please read the [official license documentation](https://neo4j.com/licensing)

# Installation

## Basic Installation

- Add the repository
```
helm repo add olympe https://olympeio.github.io/olympe-helm/
```
- Install this Helm chart
```
name=<your project name>
helm install $name olympe/olympe \
 --namespace $name \
 --create-namespace \
 --wait
```

This process will run the frontend and backend, as well as load the default patches required for Olympe to work. You can then access Draw by following the process described on the outputed notes

## Upgrade
- Update the repositories
```
helm repo update
```
- Use the `helm upgrade` command:
```
helm upgrade $name olympe/olympe \
  --namespace $name
```

# Build and deploy your own code

> :warning: **About unsaved data**: Data that are not snapshooted will be wiped during the update process. Please [check below](#configure-a-snapshooter) how to snapshot your data

## Olympe Project Template
- Clone the [Olympe-Project-Template](https://github.com/olympeio/olympe-project-template) git repository
- Follow the repository instructions to build your code

## Deploy CodeAsData from your local computer
- Delete the current patches:
```
kubectl exec \
--namespace $name \
$(kubectl get pod --namespace $name -l app.kubernetes.io/component=orchestrator \
  --no-headers \
  -o custom-columns=":metadata.name") \
 -- sh -c 'rm -rf /patches/*'
```
- From your local olympe template directory, compress and copy your built Code As Data to the orchestrator:
```
tar -czvf patches.tar.gz -C dist/codeAsData . &&\
kubectl cp --namespace $name patches.tar.gz \
 $(kubectl get pod --namespace $name -l app.kubernetes.io/component=orchestrator \
 --no-headers -o custom-columns=":metadata.name"):/patches
``` 
- Extract the copied archive
```
kubectl exec \
--namespace $name \
$(kubectl get pod --namespace $name -l app.kubernetes.io/component=orchestrator \
  --no-headers \
  -o custom-columns=":metadata.name") \
 -- sh -c 'tar -xzvf /patches/patches.tar.gz -C /patches && rm /patches/patches.tar.gz'
```
- Once finished, run the update job:
```
kubectl delete job --namespace $name -l app.kubernetes.io/part-of=toolkit --ignore-not-found
helm template $name olympe/olympe \
 --namespace $name \
 --set orchestrator.initInstall.command=update \
 -s templates/init-install.yml | kubectl apply --namespace $name -f -
```

## Deploy CodeAsData using a Docker image
- Build and push the codeAsData image
```
docker_registry=<your docker registry>
codeasdata_image=<your codeasdata image name>
tag=<the tag of your codeasdata>
docker build -t $docker_registry/$codeasdata_image:$tag \
 --build-arg="SOURCES_PATH=runDraw/dist/codeAsData" \
 -f docker/codeasdata.Dockerfile .
docker push $docker_registry/$codeasdata_image:$tag
```
- Deploy CodeAsData
```
kubectl delete job --namespace $name $name-olympe-codeasdata --ignore-not-found
helm template $name olympe/olympe \
 --namespace $name \
 --set codeAsData.image.repository=$docker_registry \
 --set codeAsData.image.name=$codeasdata_image \
 --set codeAsData.image.tag=$tag \
 -s templates/init-codeasdata.yml | kubectl apply --namespace $name -f -
```
- Once the job is finished, run the update job
```
kubectl delete job --namespace $name $name-olympe-install --ignore-not-found
helm template $name olympe/olympe \
 --namespace $name \
 --set orchestrator.initInstall.command=update \
 -s templates/init-install.yml | kubectl apply --namespace $name -f -
```

## Configure a Snapshooter
A Snapshooter is a CronJob that will download and save the code as data into patches (json files) from a deployed environment to a git repository. You will need the following information to configure it:
- **root tags**: You can get the root tag of your application(s) by opening it in Draw. the tag will be in the URL\n. You can snapshoot multiple tags (e.g. `["018a88a4d5312b1501c6","018a88a4d5312b1501c6"]`)
- **git repository**: https link to repository with authentication token (e.g. `https://gitlab-token:****@gitlab.mycompany.com/my-project.git`)
- **branch**: an existing branch on the selected git repository (e.g. `snapshot`)

### With config key
- Enable the snapshooter in values.yaml
```
repo=<link to git repository>
branch=<branch>
rootTags=<list of root tags>
cat <<EOF | helm upgrade $name olympe/olympe --namespace $name --reuse-values -f -
snapshooters:
  - name: $name
    schedule: "45 12 * * *" # cron syntax
    config: |-
      [
        {
          "snapshooter": {
            "name": "$name",
            "rootTags": $rootTags,
            "outputDir": "snapshot"
          },
          "git": {
            "repo": "$repo",
            "branch": "$branch",
            "commitMessage": "Snapshoted at {date} in {folder}"
          }
        }
      ]
EOF
```
### With custom secret
If you don't want sensitive data in you helm values, you can also create the secret separately

- Create a secret with the following configuration:
```
repo=<link to git repository>
branch=<branch>
rootTags=<list of root tags>
cat <<EOF | kubectl apply --namespace $name -f -
apiVersion: v1
kind: Secret
metadata:
  name: $name-olympe-snapshooter-config
type: Opaque
stringData:
  $name.json: |-
    [
      {
        "snapshooter": {
          "name": "$name",
          "rootTags": $rootTags,
          "outputDir": "snapshot"
        },
        "git": {
          "repo": "$repo",
          "branch": "$branch",
          "commitMessage": "Snapshoted at {date} in {folder}"
        }
      }
    ]
EOF
```


- Enable the snapshooter in values.yaml
```
cat <<EOF | helm upgrade $name olympe/olympe --namespace $name --reuse-values -f -
snapshooters:
  - name: $name
    schedule: "45 12 * * *" # cron syntax
EOF
```

## Change credentials
- Create a secret named `orchestrator-default-secret` in the correct namespace with your new credentials. You can setup only `DRAW_PASSWORD`, `DRAW_USERNAME` or both of them.
```
cat <<EOF | kubectl apply --namespace $name -f -
apiVersion: v1
kind: Secret
metadata:
  name: orchestrator-default-secret
type: Opaque
stringData:
  DRAW_USERNAME: <username>
  DRAW_PASSWORD: ****
EOF
```
- Restart the orchestrator
```
kubectl rollout restart --namespace $name deploy/$name-olympe-orchestrator
```
- Execute the updateUser job
```
kubectl delete job --namespace $name -l app.kubernetes.io/part-of=toolkit --ignore-not-found
helm template $name olympe/olympe \
 --namespace $name \
 --set orchestrator.initInstall.command=updateUser \
 -s templates/init-install.yml | kubectl apply --namespace $name -f -
```

{{ template "chart.requirementsSection" . }}

{{ template "chart.valuesHeader" . }}
**Keys without a description are not meant to be changed**
{{ template "chart.valuesTable" . }}
