# Olympe Helm Chart

# Description

# Prerequisites

- Kubernetes (k3d,k3s,minikube, etc) >= v1.24
- Kubectl: https://kubernetes.io/docs/tasks/tools/#kubectl

# About Neo4j
Default Olympe installation is using Neo4j Community as database engine. Be aware that **Neo4j Enterprise is a licensed product**. Please read the [official license documentation](https://neo4j.com/licensing)

# Installation

## Basic Installation

- Add the repository
```
helm repo add olympe https://olympeio.github.io/olympe-helm/
```
- Install this Helm chart
```
name=<your project name>
helm install $name olympe/olympe \
 --namespace $name \
 --create-namespace \
 --wait
```

This process will run the frontend and backend, as well as load the default patches required for Olympe to work. You can then access Draw by following the process described on the outputed notes

## Upgrade
- Update the repositories
```
helm repo update
```
- Use the `helm upgrade` command:
```
helm upgrade $name olympe/olympe \
  --namespace $name
```

# Build and deploy your own code

## Olympe Project Template
- Clone the [Olympe-Project-Template](https://github.com/olympeio/olympe-project-template) git repository
- Follow the repository instructions to build your code

## Deploy CodeAsData from your local computer
Copy your built code as data to the orchestrator:
```
kubectl cp --namespace $name dist/codeAsData/ \
 $(kubectl get pod -n $name -l app.kubernetes.io/component=orchestrator \ 
 --no-headers -o custom-columns=":metadata.name"):/tmp &&\
kubectl exec --namespace $name deploy/$name-olympe-orchestrator -- \
bash -c "rsync -aci --delete --exclude 'change_log.txt' \
 /tmp/codeAsData/. /patches/ | (grep -E '^[^.c].*[^\/]$' || true) | tee -a /patches/change_log.txt"
```
- Once finished, run the update job:
```
kubectl delete job --namespace $name -l app.kubernetes.io/part-of=toolkit --ignore-not-found
helm template $name olympe/olympe \
 --namespace $name \
 --set orchestrator.initInstall.command=update \
 -s templates/init-install.yml | kubectl apply -n $name -f -
```

## Deploy CodeAsData using a Docker image
- Build and push the codeAsData image
```
docker_registry=<your docker registry>
codeasdata_image=<your codeasdata image name>
tag=<the tag of your codeasdata>
docker build -t $docker_registry/$codeasdata_image:$tag --build-arg="SOURCES_PATH=runDraw/dist/codeAsData" -f docker/codeasdata.Dockerfile .
docker push $docker_registry/$codeasdata_image:$tag
```
- Deploy CodeAsData
```
kubectl delete job --namespace $name $name-olympe-codeasdata --ignore-not-found
helm template $name olympe/olympe \
 --namespace $name \
 --set codeAsData.image.repository=$docker_registry \
 --set codeAsData.image.name=$codeasdata_image \
 --set codeAsData.image.tag=$tag \
 -s templates/init-codeasdata.yml | kubectl apply -n $name -f -
```
- Once the job is finished, run the update job
```
kubectl delete job --namespace $name $name-olympe-install --ignore-not-found
helm template $name olympe/olympe \
 --namespace $name \
 -s templates/init-install.yml | kubectl apply -n $name -f -
```

# Olympe Toolkit

You can use the Olympe Toolkit image to execute multiple tasks:

- Install: Reset the database to its initial state or to the latest snapshot (if configured)
- Update: Reset the database to its initial state or to the latest snapshot (if configured)
- Snapshooter: Take a snapshot of your instance and backup it to a git repository
- Change credentials: Change the admin user and/or password

## Snapshooter
### With config key
- Enable the snapshooter in values.yaml
```
[...]
snapshooters:
  - name: $name
    schedule: "45 12 * * *" # cron syntax
    secretName: snapshooter-secret
    config |-
      [{
        "name": "$name",
        "rootTags": [<list of root tags>],
        "path": "snapshot",
        "server": {
          "user": "admin",
          "password": "***",
          "host": "<namespace>-orchestrator",
          "port": 8080
        },
        "git":{
          "repo": "https://",
          "branch": "<branch>",
          "commitMessage": "Snapshot at {date} in {folder}\n\n"
        }
      }]
```
### With custom secret
- Create a secret with the following configuration:
```
cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: Secret
metadata:
  name: snapshooter-secret
type: Opaque
stringData:
  config.json: |-
    [{
      "name": "$name",
      "rootTags": [<list of root tags>],
      "path": "snapshot",
      "server": {
        "user": "admin",
        "password": "***",
        "host": "<namespace>-orchestrator",
        "port": 8080
      },
      "git":{
        "repo": "https://",
        "branch": "<branch>",
        "commitMessage": "Snapshot at {date} in {folder}\n\n"
      }
    }]
EOF
```
  **rootTags**: You can get the root tag of your application(s) by opening it in Draw. the tag will be in the URL\n
  **git.repo**: https link to repository with authentication token (e.g. https://gitlab-token:****@gitlab.mycompany.com/my-project.git)

- Enable the snapshooter in values.yaml
```
[...]
snapshooters:
  - name: $name
    schedule: "45 12 * * *" # cron syntax
    secretName: snapshooter-secret
    image: $docker_registry/<olympe-tools-image>:$tag
```

## Change credentials
- Create a secret named `orchestrator-default-secret` in the correct namespace with your new credentials. You can setup only `DRAW_PASSWORD`, `DRAW_USERNAME` or both of them.
```
cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: Secret
metadata:
  name: orchestrator-default-secret
  namespace: <namespace>
type: Opaque
stringData:
  DRAW_USERNAME: <username>
  DRAW_PASSWORD: ****
EOF
```

- Delete the remaining resetCredentials job (if applicable)
```
kubectl delete job -n <namespace> --selector=app.kubernetes.io/component=resetcredentials --ignore-not-found
```

- Execute the new job
```
helm dependency build && helm template <namespace> olympe/olympe \
 --set olympeTools.action=resetCredentials \
  -s templates/olympe-tools.yml
```

{{ template "chart.requirementsSection" . }}

{{ template "chart.valuesHeader" . }}
**Keys without a description are not meant to be changed**
{{ template "chart.valuesTable" . }}
