apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ printf "%s-frontend-config" (include "olympe.fullname" .) | trunc 63 | trimSuffix "-" }}
  labels:
    {{- include "olympe.labels" . | nindent 4 }}
    app.kubernetes.io/component: frontend
data:
  {{- with (first .Values.ingress.hosts) }}
  APP_HOSTNAME: {{ . }}
  {{- end }}
  TLS_TYPE: "http-only"
  APP_PORT: "443"
  {{- range $key, $val := .Values.frontend.env }}
  {{ $key }}: {{ $val | quote }}
  {{- end }}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ printf "%s-frontend-server-config" (include "olympe.fullname" .) | trunc 63 | trimSuffix "-" }}
  labels:
    {{- include "olympe.labels" . | nindent 4 }}
    app.kubernetes.io/component: frontend
data:
  common.conf: |
    root /usr/share/nginx/html;

    location / {
    {{- if .Values.frontend.additionalDirectives }}
      {{ .Values.frontend.additionalDirectives | indent 6 | trim }}
    {{- end }}
    }

    #location /backend {
    #  proxy_pass http://$backend;
    #  proxy_pass_request_headers      on;
    #}

    location /OlympeServer/websocket {
      proxy_pass http://$orchestrator/OlympeServer/websocket;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $connection_upgrade;
      proxy_connect_timeout 7d;
      proxy_send_timeout 7d;
      proxy_read_timeout 7d;
    }

    location /OlympeServer/rest {
      proxy_pass http://$orchestrator;
      proxy_http_version 1.1;
      client_max_body_size 3000M;
      proxy_connect_timeout       900;
      proxy_send_timeout          900;
      proxy_read_timeout          900;
      send_timeout                900;
    }

    location /OlympeServer/metrics {
      proxy_pass http://micrometer/metrics;
      proxy_http_version 1.1;
    }

    location /OlympeServer/status {
      proxy_pass http://orchestrator/status;
      proxy_http_version 1.1;
      expires -1;
      add_header 'Cache-Control' 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
    }

    location ~* \.(json)$ {
      add_header 'Cache-Control' 'no-cache, must-revalidate, proxy-revalidate, max-age=0';
    }

    location /OlympeServer/rest/querysvc/graphDef/static {
      proxy_pass http://$orchestrator;
      proxy_http_version 1.1;
      client_max_body_size 50M;
      proxy_connect_timeout 900;
      proxy_send_timeout 900;
      proxy_read_timeout 900;
      send_timeout 900;

      proxy_cache_key "$scheme$host$uri$is_args$arg_query$arg_v";
      proxy_cache graphDef_cache;
      proxy_cache_methods GET;
      proxy_ignore_headers Cache-Control;
      proxy_cache_valid 200 1M;
      add_header X-Cache-Status $upstream_cache_status;
    }

    location /mqtt/ws {
      proxy_pass http://rabbitmq/ws;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $connection_upgrade;
      proxy_connect_timeout 7d;
      proxy_send_timeout 7d;
      proxy_read_timeout 7d;
    }
    
    include /etc/nginx/subconf.d/*.conf;

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ printf "%s-frontend-custom-config" (include "olympe.fullname" .) | trunc 63 | trimSuffix "-" }}
  labels:
    {{- include "olympe.labels" . | nindent 4 }}
    app.kubernetes.io/component: frontend
data:
  http.conf: |
      tcp_nopush on;
      tcp_nodelay on;
      types_hash_max_size 2048;

      server_tokens off;

      error_log /var/log/nginx/error.log;

      ##
      # Rate Limiting Settings
      ##

      limit_req_zone $binary_remote_addr zone=ip:10m rate=5r/s;

      ##
      # Cache Settings
      ##

      proxy_cache_path /var/cache/nginx/$IMAGE_TAG keys_zone=nginxcache:20m;
      proxy_cache_path /var/cache/nginx/$IMAGE_TAG/graphdef levels=1:2 keys_zone=graphDef_cache:1m max_size=200m inactive=1M;

      ##
      # Gzip Settings
      ##

      gzip on;
      gzip_vary on;
      gzip_static on;
      gzip_disable "msie6";
      gzip_proxied any;
      gzip_comp_level 1;
      gzip_min_length 1000;
      gzip_types
        application/javascript
        application/x-javascript
        text/javascript
        text/html
        text/css;

      ##
      # Virtual Host Configs
      ##

      include /etc/nginx/sites-enabled/*;
      add_header Strict-Transport-Security "max-age=15768000; includeSubdomains" always;
      add_header X-Frame-Options "SAMEORIGIN" always;
      add_header X-Xss-Protection "1; mode=block" always;
      add_header X-Content-Type-Options "nosniff" always;
      client_max_body_size 8M;
      client_body_buffer_size 10K;
      client_header_buffer_size 1k;

      map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
      }

      map $http_host $orchestrator {
        {{- range .Values.ingress.hosts }}
        {{ . }} orchestrator;
        {{- end }}
        {{- if and .Values.additionalIngress.enabled .Values.additionalServices.enabled }}
          {{- range $host := .Values.ingress.hosts }}
            {{- range $.Values.orchestrator.additionalServices }}
        {{ printf "%s%s" $.Values.additionalIngress.prefix $host}} {{ printf "orchestrator-%s" .suffix }};
            {{- end }}
          {{- end }}
        {{- end }}
        {{ printf "%s-frontend" (include "olympe.fullname" $) | trunc 63 | trimSuffix "-" }} orchestrator;
        {{- if .Values.additionalServices.enabled }}
          {{- range .Values.orchestrator.additionalServices }}
        {{ printf "%s-frontend-%s" (include "olympe.fullname" $) .suffix | trunc 63 | trimSuffix "-" }} {{ printf "orchestrator-%s" .suffix }};
          {{- end }}
        {{- end }}
        default orchestrator;
      }

      {{- /* Must add a `map` and an `upstream` for each port exposed by the service apps */}}
      {{- range $k, $v := .Values.serviceApps }}
      {{- if ne (.type) "cronJob" }}
          {{- /* Use a fully qualified domain names (FQDNs) for the resolver to work */}}
          {{- $addrSuffix := printf "%s.svc.cluster.local" (include "olympe.fullname" $) }}
          {{- $serviceName := printf "%s-%s" (include "olympe.fullname" $) $k | trunc 63 | trimSuffix "-" }}
          {{- /* -- Create the `map` entries */}}
      map $http_host ${{ $k | replace "-" "_" }} {
          {{- range $.Values.ingress.hosts }}
        {{ . }} {{ $serviceName }}.{{ $addrSuffix }};
          {{- end }}
          {{- if and $.Values.additionalIngress.enabled $.Values.additionalServices.enabled }}
            {{- range $host := $.Values.ingress.hosts }}
              {{- range $saAdditionalService := $.Values.serviceAppsAdditionalServices }}
        {{ printf "%s%s" $.Values.additionalIngress.prefix $host}} {{ printf "%s-%s" $serviceName $saAdditionalService.suffix  | trunc 63 | trimSuffix "-" }}.{{ $addrSuffix }};
              {{- end }}
            {{- end }}
          {{- end }}
        {{ printf "%s-frontend" (include "olympe.fullname" $) | trunc 63 | trimSuffix "-" }} {{ $serviceName }}.{{ $addrSuffix }};
          {{- if $.Values.additionalServices.enabled }}
            {{- range $.Values.frontend.additionalServices }}
              {{- range $saAdditionalService := $.Values.serviceAppsAdditionalServices }}
        {{ printf "%s-frontend-%s" (include "olympe.fullname" $) .suffix | trunc 63 | trimSuffix "-" }} {{ printf "%s-%s" $serviceName $saAdditionalService.suffix | trunc 63 | trimSuffix "-" }}.{{ $addrSuffix }};
              {{- end }}
            {{- end }}
          {{- end }}
        default {{ $serviceName }}.{{ $addrSuffix }};
      }
      {{- end }}
      {{- end }}

      upstream orchestrator {
        server {{ printf "%s-orchestrator" (include "olympe.fullname" .) | trunc 63 | trimSuffix "-" }}:8080;
      }

      {{- if .Values.additionalServices.enabled }}
          {{- range .Values.orchestrator.additionalServices }}
      upstream {{ printf "orchestrator-%s" .suffix }} {
        server {{ printf "%s-orchestrator-%s" (include "olympe.fullname" $) .suffix | trunc 63 | trimSuffix "-" }}:8080;
      }
        {{- end }}
      {{- end }}

      upstream micrometer {
        server {{ printf "%s-orchestrator" (include "olympe.fullname" .) | trunc 63 | trimSuffix "-" }}:8081;
      }

      upstream rabbitmq {
        server {{ printf "%s:%d" .Values.frontend.rabbitmq.host (.Values.frontend.rabbitmq.mqttPort | int) }};
      }

      # Resolver for kubernetes services: required because of variable in the proxy_pass directives
      # so that the DNS resolution is done at runtime
      resolver kube-dns.kube-system.svc.cluster.local valid=10s;

      server {
        proxy_cache nginxcache;
        listen {{ .Values.frontend.port }};
        listen [::]:{{ .Values.frontend.port }};
        {{- with (first .Values.ingress.hosts) }}
        server_name {{ . }};
        {{- end }}

        include /etc/nginx/server/*.conf;
        include /etc/nginx/site[.]conf;

        proxy_buffer_size          128k;
        proxy_buffers              4 256k;
        proxy_busy_buffers_size    256k;
        large_client_header_buffers 4 64k;

        location ^~ /olympe-admin {
          gunzip on;
          alias /usr/share/nginx/html;
        }
      }
      
      {{- if and (.Values.additionalIngress.enabled) (.Values.additionalServices.enabled) }}
      server {
        proxy_cache nginxcache;
        listen 85;
        listen [::]:85;
        {{- with (first .Values.ingress.hosts) }}
        server_name {{ printf "%s%s" $.Values.additionalIngress.prefix . }};
        {{- end }}

        include /etc/nginx/server/*.conf;
        include /etc/nginx/site[.]conf;

        proxy_buffer_size          128k;
        proxy_buffers              4 256k;
        proxy_busy_buffers_size    256k;
        large_client_header_buffers 4 64k;

        location ^~ /olympe-admin {
          gunzip on;
          alias /usr/share/nginx/html;
        }
      }
      {{- end }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ printf "%s-frontend-subconf" (include "olympe.fullname" .) | trunc 63 | trimSuffix "-" }}
  labels:
    {{- include "olympe.labels" . | nindent 4 }}
    app.kubernetes.io/component: frontend
data:
  additional.conf: {{ default "" .Values.frontend.additionalConfig | quote }}
  backend.conf: |
{{- $defaultBackend := "" }}
{{- range $k, $v := .Values.serviceApps }}
  {{- if ne (.type) "cronJob" }}
    {{- $serviceName := $k | replace "-" "_" }}
    location /{{ $k }}/runtime {
      client_max_body_size 100M;
      proxy_pass http://${{ $serviceName }}:3141;
      proxy_pass_request_headers      on;
      {{- if .additionalDirectives }}
      {{ .additionalDirectives | indent 6 | trim }}
      {{- end }}
    }
    {{- if and (.defaultBackend) (eq $defaultBackend "") }}
    {{ $defaultBackend = $k }}
    location /runtime {
      client_max_body_size 100M;
      proxy_pass http://${{ $serviceName }}:3141;
      proxy_pass_request_headers      on;
      {{- if .additionalDirectives }}
      {{ .additionalDirectives | indent 6 | trim }}
      {{- end }}
    }
    {{- end }}
    {{- if .webservices }}
    {{- range .webservices }}
    location {{ .uri }} {
      proxy_pass http://${{ $serviceName }}:{{ default 80 .port }};
      proxy_pass_request_headers      on;
      {{- if .additionalDirectives }}
      {{ .additionalDirectives | indent 6 | trim }}
      {{- end }}
    }
    {{- end }}
    {{- end }}
  {{- end }}
{{ end }}
---
{{- if .Values.frontend.oConfig }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ printf "%s-frontend-oconfig" (include "olympe.fullname" .) | trunc 63 | trimSuffix "-" }}
  labels:
    {{- include "olympe.labels" . | nindent 4 }}
    app.kubernetes.io/component: frontend
data:
  oConfig.json: {{ default "" .Values.frontend.oConfig | quote }}
{{ end }}